# -*- coding: utf-8 -*-
"""train_and_export.py

Automatically generated by Colaboratory.
For use with :  [Colab Notebook URL]

"""

# Imports
import numpy as np
import os
import tensorflow as tf

from tflite_model_maker.config import ExportFormat, QuantizationConfig
from tflite_model_maker import model_spec
from tflite_model_maker import object_detector
from tflite_support import metadata
from absl import logging

assert tf.__version__.startswith('2')

# Set GPU memory growth
gpus = tf.config.list_physical_devices('GPU')
if gpus:
    try:
        for gpu in gpus:
            tf.config.experimental.set_memory_growth(gpu, True)
        logical_gpus = tf.config.list_logical_devices('GPU')
        print(len(gpus), "Physical GPUs,", len(logical_gpus), "Logical GPUs")
    except RuntimeError as e:
        print(e)

tf.get_logger().setLevel('ERROR')
logging.set_verbosity(logging.ERROR)

# Confirm TF Version
print("\nTensorflow Version:")
print(tf.__version__)
print()

# Load Dataset
train_data = object_detector.DataLoader.from_pascal_voc(
    'shapes/train/images',
    'shapes/train/annotations',
    ['box', 'circle', 'path', 'tree', 'x']
)

val_data = object_detector.DataLoader.from_pascal_voc(
    'shapes/validate/images',
    'shapes/validate/annotations',
    ['box', 'circle', 'path', 'tree', 'x']
)

# Load model spec
spec = object_detector.EfficientDetSpec(
  model_name='efficientdet-lite2',
  uri='https://tfhub.dev/tensorflow/efficientdet/lite2/feature-vector/1',
  model_dir='/content/checkpoints',
  hparams={'max_instances_per_image': 8000})

# Train the model
model = object_detector.create(train_data, model_spec=spec, batch_size=1, train_whole_model=True, epochs=20, validation_data=val_data)

# Export the model
model.export(export_dir='.', tflite_filename='android.tflite')
