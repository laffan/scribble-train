# -*- coding: utf-8 -*-
"""evaluate_tflite.py

Automatically generated by Colaboratory.
For use with :  [Colab Notebook URL]

"""

# Imports
import tensorflow as tf
from tflite_model_maker import object_detector
from absl import logging

# Set loggers to ERROR to reduce output verbosity
tf.get_logger().setLevel('ERROR')
logging.set_verbosity(logging.ERROR)

# Load validation data
val_data = object_detector.DataLoader.from_pascal_voc(
    'shapes/validate/images',
    'shapes/validate/annotations',
    ['box', 'circle', 'path', 'tree', 'x']
)

# Path to the TFLite model
tflite_model_path = 'android.tflite'

# Initialize TFLite interpreter using the model
interpreter = tf.lite.Interpreter(model_path=tflite_model_path)
interpreter.allocate_tensors()

# Evaluate the TFLite model using the object detector
tflite_eval_result = object_detector.evaluate_tflite(model_path=tflite_model_path, data=val_data)

# Print COCO metrics for the TFLite model
print("COCO metrics tflite:")
for label, metric_value in tflite_eval_result.items():
    print(f"{label}: {metric_value}")
